package emulator

import (
	"io"
	"strings"
)

type HookType int

const (
	HOOK_TYPE_INTR HookType = 1 << iota
	HOOK_TYPE_INSN_INVALID
	HOOK_TYPE_CODE
	HOOK_TYPE_BLOCK
	HOOK_TYPE_MEM_READ_UNMAPPED
	HOOK_TYPE_MEM_WRITE_UNMAPPED
	HOOK_TYPE_MEM_FETCH_UNMAPPED
	HOOK_TYPE_MEM_READ_PROT
	HOOK_TYPE_MEM_WRITE_PROT
	HOOK_TYPE_MEM_FETCH_PROT
	HOOK_TYPE_MEM_READ
	HOOK_TYPE_MEM_WRITE
	HOOK_TYPE_MEM_FETCH
	HOOK_TYPE_MEM_READ_AFTER

	HOOK_TYPE_MEM_UNMAPPED      = HOOK_TYPE_MEM_READ_UNMAPPED | HOOK_TYPE_MEM_WRITE_UNMAPPED | HOOK_TYPE_MEM_FETCH_UNMAPPED
	HOOK_TYPE_MEM_PROT          = HOOK_TYPE_MEM_READ_PROT | HOOK_TYPE_MEM_WRITE_PROT | HOOK_TYPE_MEM_FETCH_PROT
	HOOK_TYPE_MEM_READ_INVALID  = HOOK_TYPE_MEM_READ_UNMAPPED | HOOK_TYPE_MEM_READ_PROT
	HOOK_TYPE_MEM_WRITE_INVALID = HOOK_TYPE_MEM_WRITE_UNMAPPED | HOOK_TYPE_MEM_WRITE_PROT
	HOOK_TYPE_MEM_FETCH_INVALID = HOOK_TYPE_MEM_FETCH_UNMAPPED | HOOK_TYPE_MEM_FETCH_PROT
	HOOK_TYPE_MEM_INVALID       = HOOK_TYPE_MEM_READ_INVALID | HOOK_TYPE_MEM_WRITE_INVALID | HOOK_TYPE_MEM_FETCH_INVALID
	HOOK_TYPE_MEM_VALID         = HOOK_TYPE_MEM_READ | HOOK_TYPE_MEM_WRITE | HOOK_TYPE_MEM_FETCH
)

type InterruptCallback = func(intno uint64, data any)
type InvalidCallback = func(data any) bool
type CodeCallback = func(addr, size uint64, data any)
type MemoryCallback = func(typ HookType, addr, size, value uint64, data any) bool

type Hook interface {
	io.Closer
	Type() HookType
}

var hookTypeNames = map[HookType]string{
	HOOK_TYPE_INTR:               "INTR",
	HOOK_TYPE_INSN_INVALID:       "INSN_INVALID",
	HOOK_TYPE_CODE:               "CODE",
	HOOK_TYPE_BLOCK:              "BLOCK",
	HOOK_TYPE_MEM_READ_UNMAPPED:  "MEM_READ_UNMAPPED",
	HOOK_TYPE_MEM_WRITE_UNMAPPED: "MEM_WRITE_UNMAPPED",
	HOOK_TYPE_MEM_FETCH_UNMAPPED: "MEM_FETCH_UNMAPPED",
	HOOK_TYPE_MEM_READ_PROT:      "MEM_READ_PROT",
	HOOK_TYPE_MEM_WRITE_PROT:     "MEM_WRITE_PROT",
	HOOK_TYPE_MEM_FETCH_PROT:     "MEM_FETCH_PROT",
	HOOK_TYPE_MEM_READ:           "MEM_READ",
	HOOK_TYPE_MEM_WRITE:          "MEM_WRITE",
	HOOK_TYPE_MEM_FETCH:          "MEM_FETCH",
	HOOK_TYPE_MEM_READ_AFTER:     "MEM_READ_AFTER",
}

func (ht HookType) String() string {
	var result []string
	for typ, name := range hookTypeNames {
		if ht&typ != 0 {
			result = append(result, name)
		}
	}
	return strings.Join(result, "|")
}
